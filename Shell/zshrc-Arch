# System Info (Moved before instant prompt)
if [[ $- == *i* ]]; then
  fastfetch
fi


# cache compinit
autoload -Uz compinit
export ZSH_COMPDUMP="${ZDOTDIR:-$HOME}/.zcompdump"
if [[ -f $ZSH_COMPDUMP && -z "$(find $ZSH_COMPDUMP -mtime -1 2>/dev/null)" ]]; then
  compinit -C
else
  compinit
fi

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

fpath+=~/.zfunc; autoload -Uz compinit; compinit

zstyle ':completion:*' menu select

## [Completion]
## Completion scripts setup. Remove the following line to uninstall
[[ -f /home/HL/.dart-cli-completion/zsh-config.zsh ]] && . /home/HL/.dart-cli-completion/zsh-config.zsh || true
## [/Completion]


# SSH (Moved before instant prompt)
alias HL="eval '$(ssh-agent -s)' && ssh-add ~/.ssh/id_rsa"
alias proxy="export ALL_PROXY=socks5://127.0.0.1:1080"
alias unproxy="unset ALL_PROXY"
alias pubip="curl -s https://ipinfo.io"
alias alipip='export PIP_INDEX_URL=https://mirrors.aliyun.com/pypi/simple/'
alias huggcn='export HF_ENDPOINT=https://hf-mirror.com'
alias claude-desktop='nohup claude-desktop --no-sandbox > /dev/null 2>&1 & disown'

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# Environment Variables
export PATH="$PATH:/home/HL/.local/bin"
export DOCKER_HOST=unix:///var/run/docker.sock
export PATH="$HOME/.local/bin:$PATH"
export PATH="/Library/TeX/texbin:$PATH"
export PATH="$HOME/.cargo/bin:$PATH"
export PATH="$PATH:/home/HL/.lmstudio/bin"
export EDITOR=nvim
export CLICOLOR=1
export VISUAL="nvim"

# sdk
export SDKMAN_DIR="$HOME/.sdkman"
[[ -s "$SDKMAN_DIR/bin/sdkman-init.sh" ]] && source "$SDKMAN_DIR/bin/sdkman-init.sh"

# pyenv
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init --path)"
eval "$(pyenv virtualenv-init -)"
eval "$(pyenv init -)"
alias pvs='pyenv virtualenvs'

# Custom Commands and Aliases
alias c='clear'
alias h='history'
alias q='exit'
alias r='reset'
alias btop='sudo btop'
alias bettercap='sudo bettercap'
alias pac='sudo pacman'
alias pacman='sudo pacman'
alias zshrc='source ~/.zshrc'

# Dir
alias cdd='cd ..'
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias Git='cd /mnt/Dev/Git/'
alias doc='cd ~/Documents/'
alias dow='cd ~/Downloads/'
alias des='cd ~/Desktop/'
alias cheats='cd ~/.local/share/navi/cheats'

# Commands
alias ssh='TERM=xterm-256color ssh'
alias music='cmus'
alias zstd='zstd -T36'
alias pigz='pigz -p $(nproc)'
alias fzf="fzf --multi \
  --preview 'bat --style=numbers --color=always {}' \
  --bind 'ctrl-o:execute(nvim {}),ctrl-b:change-preview(bat --style=numbers,header --color=always {})'"
alias tailping="tailscale status | grep -Eo '100\.[0-9]+\.[0-9]+\.[0-9]+' | xargs gping"
alias pingnode="tailscale status | grep 'exit node' | grep -Eo '100\.[0-9]+\.[0-9]+\.[0-9]+' | xargs gping"
alias rustscan='rustscan --ulimit 5000'
alias trace='nexttrace'
alias p='python'
alias rsync='rsyncy'
alias icat='kitten icat '
alias duf='dysk'
alias libtoolize='glibtoolize'
alias poweroff='sudo shutdown -h now'
alias v='$EDITOR'
alias nano='$EDITOR'
alias n='$EDITOR'
alias vim='$EDITOR'

# Auto `ls` after `cd`
alias ls='eza --icons --group-directories-first --sort=extension'
cd() {
    builtin cd "$@" && ls
}

# Oh-my-zsh installation path
ZSH=/usr/share/oh-my-zsh/

# Powerlevel10k theme path
source /usr/share/zsh-theme-powerlevel10k/powerlevel10k.zsh-theme

# List of plugins used
plugins=( git sudo zsh-256color zsh-autosuggestions zsh-syntax-highlighting )
source $ZSH/oh-my-zsh.sh

# Zoxide Initialization
eval "$(zoxide init zsh)"

# Custom `yazi` Command Function
function y() {
  tmp="$(mktemp -t "yazi-cwd.XXXXX")"
  yazi "$@" --cwd-file="$tmp"
  if cwd="$(cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
    cd -- "$cwd"
  fi
  rm -f -- "$tmp"
}

# pipx-show
pipx-show() {
    if [ -z "$1" ]; then
        echo "Usage: pipx-show PACKAGE_NAME"
        return 1
    fi
    
    # 检查包是否已安装
    if pipx list | grep -q "$1"; then
        pipx runpip "$1" show "$1"
    else
        echo "Package $1 is not installed with pipx"
        return 1
    fi
}

gtkwave() {
  command gtkwave "$@" &
}

typora() {
  nohup typora "$@" > /dev/null 2>&1 & disown
}

ob() {
  mv "$@" ~/Obsidian/
}

open() {
  command xdg-open "$@" > /dev/null 2>&1   & disown
}

# ls
alias ls='eza --icons --group-directories-first --sort=extension'
alias la='eza -a --icons --group-directories-first --sort=extension'
alias ll='eza -al --icons --group-directories-first --sort=extension'
alias lt='eza -a --tree --level=1 --icons --group-directories-first --sort=extension'

export QSYS_ROOTDIR="/home/HL/.cache/yay/quartus-free/pkg/quartus-free-quartus/opt/intelFPGA/24.1/quartus/sopc_builder/bin"

# cuda
export PATH="/opt/cuda/bin:$PATH"
export "LD_LIBRARY_PATH=/opt/cuda/lib64:$LD_LIBRARY_PATH"

# flutter
export PATH="$HOME/development/flutter/bin:$PATH"
export CHROME_EXECUTABLE=/usr/bin/google-chrome-stable
