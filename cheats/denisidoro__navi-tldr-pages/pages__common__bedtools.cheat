; This has been extracted from
; https://github.com/tldr-pages/tldr/blob/master/pages/common/bedtools.md

% bedtools, common

# Intersect file [a] and file(s) [b] regarding the sequences' [s]trand and save the result to a specific file
bedtools intersect -a <path_to_file_A> -b <path_to_file_B1 path_to_file_B2 ...> -s > <path_to_output_file>

# Intersect two files with a [l]eft [o]uter [j]oin, i.e. report each feature from `file1` and NULL if no overlap with `file2`
bedtools intersect -a <path_to_file1> -b <path_to_file2> -loj > <path_to_output_file>

# Using more efficient algorithm to intersect two pre-sorted files
bedtools intersect -a <path_to_file1> -b <path_to_file2> -sorted > <path_to_output_file>

# [g]roup a file based on the first three and the fifth [c]olumn and apply the sum [o]peration on the sixth column
bedtools groupby -i <path_to_file> -c 1-3,5 -g 6 -o sum

# Convert bam-formatted [i]nput file to a bed-formatted one
bedtools bamtobed -i <path_to_file.bam> > <path_to_file.bed>

# Find for all features in `file1.bed` the closest one in `file2.bed` and write their [d]istance in an extra column (input files must be sorted)
bedtools closest -a <path_to_file1.bed> -b <path_to_file2.bed> -d
